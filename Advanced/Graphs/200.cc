#include "includes.hpp"





int numIslands(vector<vector<char>>& grid) {
    int islands = 0;
    int row = grid.size(), col = grid[0].size();
    std::vector<std::vector<bool>> visited(row,std::vector(col,false));

    for(int r =0;r<row;r++)
    {
        for(int c = 0; c < col ; c++)
        {
            //enter the Island map
            if(grid[r][c] == '1' and visited[r][c]==false)
            {
                queue<pair<int,int>> bfs;
                bfs.emplace(r,c);
                while(!bfs.empty())
                {
                    int x = bfs.front().first, y = bfs.front().second;
                    bfs.pop();
                    visited[x][y] = true;

                    if((x-1) >-1 and grid[x-1][y]=='1'   and visited[x-1][y]==false) bfs.emplace(x-1,y);
                    if((y-1) >-1 and grid[x][y-1]=='1'   and visited[x][y-1]==false) bfs.emplace(x,y-1);
                    if((x+1) <row and grid[x+1][y]=='1'  and visited[x+1][y]==false) bfs.emplace(x+1,y);
                    if((y+1) < col and grid[x][y+1]=='1' and visited[x][y+1]==false) bfs.emplace(x,y+1);

                }

                ++islands;
            }
        }
    }

    return islands;        
}


int main()
{
    std::vector<std::vector<char>> mat{
        {'1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','0','1','0','1','1'},
        {'0','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','0'},
        {'1','0','1','1','1','0','0','1','1','0','1','1','1','1','1','1','1','1','1','1'},
        {'1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
        {'1','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
        {'1','0','1','1','1','1','1','1','0','1','1','1','0','1','1','1','0','1','1','1'},
        {'0','1','1','1','1','1','1','1','1','1','1','1','0','1','1','0','1','1','1','1'},
        {'1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','0','1','1'},
        {'1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1'},
        {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
        {'0','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1'},
        {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
        {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
        {'1','1','1','1','1','0','1','1','1','1','1','1','1','0','1','1','1','1','1','1'},
        {'1','0','1','1','1','1','1','0','1','1','1','0','1','1','1','1','0','1','1','1'},
        {'1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','0'},
        {'1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','0','0'},
        {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
        {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
        {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'}
    };
    // std::cout<<mat;
    std::cout<<numIslands(mat);
    
}